version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      # Install OpenJDK 17
      - echo Installing OpenJDK 17...
      - sudo apt-get update -y
      - sudo apt-get install -y openjdk-17-jdk
      - java -version

      # Install MariaDB client (if not set up yet)
      - echo Installing MariaDB client...
      - sudo apt-get install -y mariadb-client

      # Install Git
      - echo Installing Git...
      - sudo apt-get install -y git
      - ls -l

  pre_build:
    commands:
      # Clone the GitHub repository
      - echo Cloning repository...
      - git clone https://github.com/lurio84/CloudComputingProject.git
      # Create .env file from example (it was not used. I configured in environment variables of CodeBuild)
      - cp .env.example .env
      - echo "DATABASE_URL=$DATABASE_URL" >> .env
      - echo "DATABASE_USERNAME=$DATABASE_USERNAME" >> .env
      - echo "DATABASE_PASSWORD=$DATABASE_PASSWORD" >> .env
      - echo "REDIS_HOST=$REDIS_HOST" >> .env
      - echo "REDIS_PORT=$REDIS_PORT" >> .env
      - echo "REDIS_USE_TLS=$REDIS_USE_TLS" >> .env

  build:
    commands:
      - cd Backend
      - ls -a
      - echo "Building Spring Boot application..."
      - chmod +x mvnw
      - ./mvnw clean package -DskipTests
      - cd ..

      # Build and push the Docker image
      - echo "Building the Docker image..."
      - IMAGE_URI=211125652233.dkr.ecr.eu-north-1.amazonaws.com/collaborativenotesrepository:$CODEBUILD_RESOLVED_SOURCE_VERSION
      - set -x
      - aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 211125652233.dkr.ecr.eu-north-1.amazonaws.com
      - docker build -t collaborativenotesrepository .
      - docker tag collaborativenotesrepository:latest $IMAGE_URI
      - docker push $IMAGE_URI

      # Create image definitions
      - echo "Writing image definitions..."
      - echo '[{"name":"full-stack","imageUri":"'$IMAGE_URI'"}]' > imagedefinitions.json  # Created in root
      - ls -l imagedefinitions.json
      - cat imagedefinitions.json

  post_build:
    commands:
      # Running the backend Spring Boot application
      - echo Running Spring Boot application...
      - java -jar target/*.jar &
      - ps aux | grep java
      - pwd

artifacts:
  files:
    - "**/target/*.jar"  # In case the location of `target/` is unknown
    - imagedefinitions.json
  discard-paths: no
